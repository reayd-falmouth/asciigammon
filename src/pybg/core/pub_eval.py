import math

import numpy as np

# Fast weights (contact and race)
gwc = np.array(
    [
        0.25696,
        -0.66937,
        -1.66135,
        -2.02487,
        -2.53398 / 2.0,
        -0.16092,
        -1.11725,
        -1.06654,
        -0.92830,
        -1.99558 / 2.0,
        -1.10388,
        -0.80802,
        0.09856,
        -0.62086,
        -1.27999 / 2.0,
        -0.59220,
        -0.73667,
        0.89032,
        -0.38933,
        -1.59847 / 2.0,
        -1.50197,
        -0.60966,
        1.56166,
        -0.47389,
        -1.80390 / 2.0,
        -0.83425,
        -0.97741,
        -1.41371,
        0.24500,
        0.10970 / 2.0,
        -1.36476,
        -1.05572,
        1.15420,
        0.11069,
        -0.38319 / 2.0,
        -0.74816,
        -0.59244,
        0.81116,
        -0.39511,
        0.11424 / 2.0,
        -0.73169,
        -0.56074,
        1.09792,
        0.15977,
        0.13786 / 2.0,
        -1.18435,
        -0.43363,
        1.06169,
        -0.21329,
        0.04798 / 2.0,
        -0.94373,
        -0.22982,
        1.22737,
        -0.13099,
        -0.06295 / 2.0,
        -0.75882,
        -0.13658,
        1.78389,
        0.30416,
        0.36797 / 2.0,
        -0.69851,
        0.13003,
        1.23070,
        0.40868,
        -0.21081 / 2.0,
        -0.64073,
        0.31061,
        1.59554,
        0.65718,
        0.25429 / 2.0,
        -0.80789,
        0.08240,
        1.78964,
        0.54304,
        0.41174 / 2.0,
        -1.06161,
        0.07851,
        2.01451,
        0.49786,
        0.91936 / 2.0,
        -0.90750,
        0.05941,
        1.83120,
        0.58722,
        1.28777 / 2.0,
        -0.83711,
        -0.33248,
        2.64983,
        0.52698,
        0.82132 / 2.0,
        -0.58897,
        -1.18223,
        3.35809,
        0.62017,
        0.57353 / 2.0,
        -0.07276,
        -0.36214,
        4.37655,
        0.45481,
        0.21746 / 2.0,
        0.10504,
        -0.61977,
        3.54001,
        0.04612,
        -0.18108 / 2.0,
        0.63211,
        -0.87046,
        2.47673,
        -0.48016,
        -1.27157 / 2.0,
        0.86505,
        -1.11342,
        1.24612,
        -0.82385,
        -2.77082 / 2.0,
        1.23606,
        -1.59529,
        0.10438,
        -1.30206,
        -4.11520 / 2.0,
        5.62596 / 2.0,
        -2.75800 / 15.0,
    ]
)

gwr = np.array(
    [
        0.00000,
        -0.17160,
        0.27010,
        0.29906,
        -0.08471 / 2.0,
        0.00000,
        -1.40375,
        -1.05121,
        0.07217,
        -0.01351 / 2.0,
        0.00000,
        -1.29506,
        -2.16183,
        0.13246,
        -1.03508 / 2.0,
        0.00000,
        -2.29847,
        -2.34631,
        0.17253,
        0.08302 / 2.0,
        0.00000,
        -1.27266,
        -2.87401,
        -0.07456,
        -0.34240 / 2.0,
        0.00000,
        -1.34640,
        -2.46556,
        -0.13022,
        -0.01591 / 2.0,
        0.00000,
        0.27448,
        0.60015,
        0.48302,
        0.25236 / 2.0,
        0.00000,
        0.39521,
        0.68178,
        0.05281,
        0.09266 / 2.0,
        0.00000,
        0.24855,
        -0.06844,
        -0.37646,
        0.05685 / 2.0,
        0.00000,
        0.17405,
        0.00430,
        0.74427,
        0.00576 / 2.0,
        0.00000,
        0.12392,
        0.31202,
        -0.91035,
        -0.16270 / 2.0,
        0.00000,
        0.01418,
        -0.10839,
        -0.02781,
        -0.88035 / 2.0,
        0.00000,
        1.07274,
        2.00366,
        1.16242,
        0.22520 / 2.0,
        0.00000,
        0.85631,
        1.06349,
        1.49549,
        0.18966 / 2.0,
        0.00000,
        0.37183,
        -0.50352,
        -0.14818,
        0.12039 / 2.0,
        0.00000,
        0.13681,
        0.13978,
        1.11245,
        -0.12707 / 2.0,
        0.00000,
        -0.22082,
        0.20178,
        -0.06285,
        -0.52728 / 2.0,
        0.00000,
        -0.13597,
        -0.19412,
        -0.09308,
        -1.26062 / 2.0,
        0.00000,
        3.05454,
        5.16874,
        1.50680,
        5.35000 / 2.0,
        0.00000,
        2.19605,
        3.85390,
        0.88296,
        2.30052 / 2.0,
        0.00000,
        0.92321,
        1.08744,
        -0.11696,
        -0.78560 / 2.0,
        0.00000,
        -0.09795,
        -0.83050,
        -1.09167,
        -4.94251 / 2.0,
        0.00000,
        -1.00316,
        -3.66465,
        -2.56906,
        -9.67677 / 2.0,
        0.00000,
        -2.77982,
        -7.26713,
        -3.40177,
        -12.32252 / 2.0,
        0.00000 / 2.0,
        3.42040 / 15.0,
    ]
)


def pubeval(race: bool, pos: list) -> float:
    """Fast public evaluation."""
    wc = gwr if race else gwc
    if pos[26] == 15:
        return 99999999.0

    score = wc[120] * (-float(pos[0])) + wc[121] * float(pos[26])

    for j in range(24, 0, -1):
        i = (24 - j) * 5
        n = pos[j]
        if n == -1:
            score += wc[i]
        elif n == 1:
            score += wc[i + 1]
        elif n == 2:
            score += wc[i + 2]
        elif n == 3:
            score += wc[i + 2] + wc[i + 3]
        elif 4 <= n <= 15:
            score += wc[i + 2] + wc[i + 4] * (n - 3)

    return score


def pubeval_x(race: bool, pos: list) -> float:
    """Accurate public evaluation with explicit feature vector."""
    if pos[26] == 15:
        return 99999999.0

    # Build x vector
    x = np.zeros(122, dtype=float)
    for j in range(1, 25):
        jm1 = j - 1
        n = pos[25 - j]
        if n != 0:
            if n == -1:
                x[5 * jm1 + 0] = 1.0
            if n == 1:
                x[5 * jm1 + 1] = 1.0
            if n >= 2:
                x[5 * jm1 + 2] = 1.0
            if n == 3:
                x[5 * jm1 + 3] = 1.0
            if n >= 4:
                x[5 * jm1 + 4] = (n - 3) / 2.0

    x[120] = -pos[0] / 2.0
    x[121] = pos[26] / 15.0

    weights = gwr if race else gwc
    return float(np.dot(weights, x))


def pubeval_to_win_probability(score: float, scaling_factor: float = 100.0) -> float:
    return 1.0 / (1.0 + math.exp(-score / scaling_factor))
